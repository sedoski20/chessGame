// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto;
namespace GameInterface {
class ClickRequest;
struct ClickRequestDefaultTypeInternal;
extern ClickRequestDefaultTypeInternal _ClickRequest_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameStatus;
struct GameStatusDefaultTypeInternal;
extern GameStatusDefaultTypeInternal _GameStatus_default_instance_;
class Name;
struct NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class PlayerID;
struct PlayerIDDefaultTypeInternal;
extern PlayerIDDefaultTypeInternal _PlayerID_default_instance_;
class PlayerPieces;
struct PlayerPiecesDefaultTypeInternal;
extern PlayerPiecesDefaultTypeInternal _PlayerPieces_default_instance_;
class PlayerTurnRequest;
struct PlayerTurnRequestDefaultTypeInternal;
extern PlayerTurnRequestDefaultTypeInternal _PlayerTurnRequest_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionStatus;
struct PositionStatusDefaultTypeInternal;
extern PositionStatusDefaultTypeInternal _PositionStatus_default_instance_;
}  // namespace GameInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::GameInterface::ClickRequest* Arena::CreateMaybeMessage<::GameInterface::ClickRequest>(Arena*);
template<> ::GameInterface::Empty* Arena::CreateMaybeMessage<::GameInterface::Empty>(Arena*);
template<> ::GameInterface::GameStatus* Arena::CreateMaybeMessage<::GameInterface::GameStatus>(Arena*);
template<> ::GameInterface::Name* Arena::CreateMaybeMessage<::GameInterface::Name>(Arena*);
template<> ::GameInterface::PlayerID* Arena::CreateMaybeMessage<::GameInterface::PlayerID>(Arena*);
template<> ::GameInterface::PlayerPieces* Arena::CreateMaybeMessage<::GameInterface::PlayerPieces>(Arena*);
template<> ::GameInterface::PlayerTurnRequest* Arena::CreateMaybeMessage<::GameInterface::PlayerTurnRequest>(Arena*);
template<> ::GameInterface::Position* Arena::CreateMaybeMessage<::GameInterface::Position>(Arena*);
template<> ::GameInterface::PositionStatus* Arena::CreateMaybeMessage<::GameInterface::PositionStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameInterface {

enum GameStatus_Status : int {
  GameStatus_Status_INITIAL = 0,
  GameStatus_Status_PLAYING = 1,
  GameStatus_Status_ENDED = 2,
  GameStatus_Status_GameStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameStatus_Status_GameStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameStatus_Status_IsValid(int value);
constexpr GameStatus_Status GameStatus_Status_Status_MIN = GameStatus_Status_INITIAL;
constexpr GameStatus_Status GameStatus_Status_Status_MAX = GameStatus_Status_ENDED;
constexpr int GameStatus_Status_Status_ARRAYSIZE = GameStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameStatus_Status_descriptor();
template<typename T>
inline const std::string& GameStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameStatus_Status_descriptor(), enum_t_value);
}
inline bool GameStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameStatus_Status>(
    GameStatus_Status_descriptor(), name, value);
}
enum PositionStatus_Status : int {
  PositionStatus_Status_NORMAL = 0,
  PositionStatus_Status_HIGHLIGHTED = 1,
  PositionStatus_Status_SELECTED = 2,
  PositionStatus_Status_ATTACK = 3,
  PositionStatus_Status_CHECK = 4,
  PositionStatus_Status_PositionStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PositionStatus_Status_PositionStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PositionStatus_Status_IsValid(int value);
constexpr PositionStatus_Status PositionStatus_Status_Status_MIN = PositionStatus_Status_NORMAL;
constexpr PositionStatus_Status PositionStatus_Status_Status_MAX = PositionStatus_Status_CHECK;
constexpr int PositionStatus_Status_Status_ARRAYSIZE = PositionStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionStatus_Status_descriptor();
template<typename T>
inline const std::string& PositionStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionStatus_Status_descriptor(), enum_t_value);
}
inline bool PositionStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PositionStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionStatus_Status>(
    PositionStatus_Status_descriptor(), name, value);
}
enum PlayerPieces_PieceType : int {
  PlayerPieces_PieceType_ROOK = 0,
  PlayerPieces_PieceType_KNIGHT = 1,
  PlayerPieces_PieceType_BISHOP = 2,
  PlayerPieces_PieceType_QUEEN = 3,
  PlayerPieces_PieceType_KING = 4,
  PlayerPieces_PieceType_PAWN = 5,
  PlayerPieces_PieceType_PlayerPieces_PieceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerPieces_PieceType_PlayerPieces_PieceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerPieces_PieceType_IsValid(int value);
constexpr PlayerPieces_PieceType PlayerPieces_PieceType_PieceType_MIN = PlayerPieces_PieceType_ROOK;
constexpr PlayerPieces_PieceType PlayerPieces_PieceType_PieceType_MAX = PlayerPieces_PieceType_PAWN;
constexpr int PlayerPieces_PieceType_PieceType_ARRAYSIZE = PlayerPieces_PieceType_PieceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerPieces_PieceType_descriptor();
template<typename T>
inline const std::string& PlayerPieces_PieceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerPieces_PieceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerPieces_PieceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerPieces_PieceType_descriptor(), enum_t_value);
}
inline bool PlayerPieces_PieceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerPieces_PieceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerPieces_PieceType>(
    PlayerPieces_PieceType_descriptor(), name, value);
}
enum PlayerTurnRequest_PlayerTurn : int {
  PlayerTurnRequest_PlayerTurn_PLAYER1_TURN = 0,
  PlayerTurnRequest_PlayerTurn_PLAYER2_TURN = 1,
  PlayerTurnRequest_PlayerTurn_PlayerTurnRequest_PlayerTurn_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerTurnRequest_PlayerTurn_PlayerTurnRequest_PlayerTurn_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerTurnRequest_PlayerTurn_IsValid(int value);
constexpr PlayerTurnRequest_PlayerTurn PlayerTurnRequest_PlayerTurn_PlayerTurn_MIN = PlayerTurnRequest_PlayerTurn_PLAYER1_TURN;
constexpr PlayerTurnRequest_PlayerTurn PlayerTurnRequest_PlayerTurn_PlayerTurn_MAX = PlayerTurnRequest_PlayerTurn_PLAYER2_TURN;
constexpr int PlayerTurnRequest_PlayerTurn_PlayerTurn_ARRAYSIZE = PlayerTurnRequest_PlayerTurn_PlayerTurn_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerTurnRequest_PlayerTurn_descriptor();
template<typename T>
inline const std::string& PlayerTurnRequest_PlayerTurn_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerTurnRequest_PlayerTurn>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerTurnRequest_PlayerTurn_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerTurnRequest_PlayerTurn_descriptor(), enum_t_value);
}
inline bool PlayerTurnRequest_PlayerTurn_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerTurnRequest_PlayerTurn* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerTurnRequest_PlayerTurn>(
    PlayerTurnRequest_PlayerTurn_descriptor(), name, value);
}
// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:GameInterface.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return new Empty();
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameInterface.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Name final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.Name) */ {
 public:
  inline Name() : Name(nullptr) {}
  ~Name() override;
  explicit constexpr Name(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Name* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const final {
    return new Name();
  }

  Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Name& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Name& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.Name";
  }
  protected:
  explicit Name(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.Name)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PlayerID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.PlayerID) */ {
 public:
  inline PlayerID() : PlayerID(nullptr) {}
  ~PlayerID() override;
  explicit constexpr PlayerID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerID(const PlayerID& from);
  PlayerID(PlayerID&& from) noexcept
    : PlayerID() {
    *this = ::std::move(from);
  }

  inline PlayerID& operator=(const PlayerID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerID& operator=(PlayerID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerID& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerID* internal_default_instance() {
    return reinterpret_cast<const PlayerID*>(
               &_PlayerID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerID& a, PlayerID& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerID* New() const final {
    return new PlayerID();
  }

  PlayerID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.PlayerID";
  }
  protected:
  explicit PlayerID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.PlayerID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GameStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.GameStatus) */ {
 public:
  inline GameStatus() : GameStatus(nullptr) {}
  ~GameStatus() override;
  explicit constexpr GameStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStatus(const GameStatus& from);
  GameStatus(GameStatus&& from) noexcept
    : GameStatus() {
    *this = ::std::move(from);
  }

  inline GameStatus& operator=(const GameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatus& operator=(GameStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStatus* internal_default_instance() {
    return reinterpret_cast<const GameStatus*>(
               &_GameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameStatus& a, GameStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStatus* New() const final {
    return new GameStatus();
  }

  GameStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.GameStatus";
  }
  protected:
  explicit GameStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameStatus_Status Status;
  static constexpr Status INITIAL =
    GameStatus_Status_INITIAL;
  static constexpr Status PLAYING =
    GameStatus_Status_PLAYING;
  static constexpr Status ENDED =
    GameStatus_Status_ENDED;
  static inline bool Status_IsValid(int value) {
    return GameStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GameStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GameStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GameStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GameStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GameStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GameStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .GameInterface.GameStatus.Status status = 1;
  void clear_status();
  ::GameInterface::GameStatus_Status status() const;
  void set_status(::GameInterface::GameStatus_Status value);
  private:
  ::GameInterface::GameStatus_Status _internal_status() const;
  void _internal_set_status(::GameInterface::GameStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.GameStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PositionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.PositionStatus) */ {
 public:
  inline PositionStatus() : PositionStatus(nullptr) {}
  ~PositionStatus() override;
  explicit constexpr PositionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionStatus(const PositionStatus& from);
  PositionStatus(PositionStatus&& from) noexcept
    : PositionStatus() {
    *this = ::std::move(from);
  }

  inline PositionStatus& operator=(const PositionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionStatus& operator=(PositionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionStatus* internal_default_instance() {
    return reinterpret_cast<const PositionStatus*>(
               &_PositionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PositionStatus& a, PositionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionStatus* New() const final {
    return new PositionStatus();
  }

  PositionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.PositionStatus";
  }
  protected:
  explicit PositionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PositionStatus_Status Status;
  static constexpr Status NORMAL =
    PositionStatus_Status_NORMAL;
  static constexpr Status HIGHLIGHTED =
    PositionStatus_Status_HIGHLIGHTED;
  static constexpr Status SELECTED =
    PositionStatus_Status_SELECTED;
  static constexpr Status ATTACK =
    PositionStatus_Status_ATTACK;
  static constexpr Status CHECK =
    PositionStatus_Status_CHECK;
  static inline bool Status_IsValid(int value) {
    return PositionStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    PositionStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    PositionStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    PositionStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return PositionStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return PositionStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return PositionStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .GameInterface.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::GameInterface::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::GameInterface::Position* release_position();
  ::GameInterface::Position* mutable_position();
  void set_allocated_position(::GameInterface::Position* position);
  private:
  const ::GameInterface::Position& _internal_position() const;
  ::GameInterface::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::GameInterface::Position* position);
  ::GameInterface::Position* unsafe_arena_release_position();

  // .GameInterface.PositionStatus.Status status = 2;
  void clear_status();
  ::GameInterface::PositionStatus_Status status() const;
  void set_status(::GameInterface::PositionStatus_Status value);
  private:
  ::GameInterface::PositionStatus_Status _internal_status() const;
  void _internal_set_status(::GameInterface::PositionStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.PositionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GameInterface::Position* position_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PlayerPieces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.PlayerPieces) */ {
 public:
  inline PlayerPieces() : PlayerPieces(nullptr) {}
  ~PlayerPieces() override;
  explicit constexpr PlayerPieces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerPieces(const PlayerPieces& from);
  PlayerPieces(PlayerPieces&& from) noexcept
    : PlayerPieces() {
    *this = ::std::move(from);
  }

  inline PlayerPieces& operator=(const PlayerPieces& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPieces& operator=(PlayerPieces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerPieces& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerPieces* internal_default_instance() {
    return reinterpret_cast<const PlayerPieces*>(
               &_PlayerPieces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerPieces& a, PlayerPieces& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPieces* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPieces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPieces* New() const final {
    return new PlayerPieces();
  }

  PlayerPieces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPieces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerPieces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerPieces& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPieces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.PlayerPieces";
  }
  protected:
  explicit PlayerPieces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerPieces_PieceType PieceType;
  static constexpr PieceType ROOK =
    PlayerPieces_PieceType_ROOK;
  static constexpr PieceType KNIGHT =
    PlayerPieces_PieceType_KNIGHT;
  static constexpr PieceType BISHOP =
    PlayerPieces_PieceType_BISHOP;
  static constexpr PieceType QUEEN =
    PlayerPieces_PieceType_QUEEN;
  static constexpr PieceType KING =
    PlayerPieces_PieceType_KING;
  static constexpr PieceType PAWN =
    PlayerPieces_PieceType_PAWN;
  static inline bool PieceType_IsValid(int value) {
    return PlayerPieces_PieceType_IsValid(value);
  }
  static constexpr PieceType PieceType_MIN =
    PlayerPieces_PieceType_PieceType_MIN;
  static constexpr PieceType PieceType_MAX =
    PlayerPieces_PieceType_PieceType_MAX;
  static constexpr int PieceType_ARRAYSIZE =
    PlayerPieces_PieceType_PieceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PieceType_descriptor() {
    return PlayerPieces_PieceType_descriptor();
  }
  template<typename T>
  static inline const std::string& PieceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PieceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PieceType_Name.");
    return PlayerPieces_PieceType_Name(enum_t_value);
  }
  static inline bool PieceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PieceType* value) {
    return PlayerPieces_PieceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kPieceTypeFieldNumber = 2,
  };
  // .GameInterface.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::GameInterface::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::GameInterface::Position* release_position();
  ::GameInterface::Position* mutable_position();
  void set_allocated_position(::GameInterface::Position* position);
  private:
  const ::GameInterface::Position& _internal_position() const;
  ::GameInterface::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::GameInterface::Position* position);
  ::GameInterface::Position* unsafe_arena_release_position();

  // .GameInterface.PlayerPieces.PieceType pieceType = 2;
  void clear_piecetype();
  ::GameInterface::PlayerPieces_PieceType piecetype() const;
  void set_piecetype(::GameInterface::PlayerPieces_PieceType value);
  private:
  ::GameInterface::PlayerPieces_PieceType _internal_piecetype() const;
  void _internal_set_piecetype(::GameInterface::PlayerPieces_PieceType value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.PlayerPieces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GameInterface::Position* position_;
  int piecetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ClickRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.ClickRequest) */ {
 public:
  inline ClickRequest() : ClickRequest(nullptr) {}
  ~ClickRequest() override;
  explicit constexpr ClickRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClickRequest(const ClickRequest& from);
  ClickRequest(ClickRequest&& from) noexcept
    : ClickRequest() {
    *this = ::std::move(from);
  }

  inline ClickRequest& operator=(const ClickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClickRequest& operator=(ClickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClickRequest* internal_default_instance() {
    return reinterpret_cast<const ClickRequest*>(
               &_ClickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClickRequest& a, ClickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClickRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClickRequest* New() const final {
    return new ClickRequest();
  }

  ClickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClickRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClickRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClickRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClickRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.ClickRequest";
  }
  protected:
  explicit ClickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .GameInterface.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::GameInterface::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::GameInterface::Position* release_position();
  ::GameInterface::Position* mutable_position();
  void set_allocated_position(::GameInterface::Position* position);
  private:
  const ::GameInterface::Position& _internal_position() const;
  ::GameInterface::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::GameInterface::Position* position);
  ::GameInterface::Position* unsafe_arena_release_position();

  // .GameInterface.PlayerID id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::GameInterface::PlayerID& id() const;
  PROTOBUF_MUST_USE_RESULT ::GameInterface::PlayerID* release_id();
  ::GameInterface::PlayerID* mutable_id();
  void set_allocated_id(::GameInterface::PlayerID* id);
  private:
  const ::GameInterface::PlayerID& _internal_id() const;
  ::GameInterface::PlayerID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::GameInterface::PlayerID* id);
  ::GameInterface::PlayerID* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:GameInterface.ClickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GameInterface::Position* position_;
  ::GameInterface::PlayerID* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PlayerTurnRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameInterface.PlayerTurnRequest) */ {
 public:
  inline PlayerTurnRequest() : PlayerTurnRequest(nullptr) {}
  ~PlayerTurnRequest() override;
  explicit constexpr PlayerTurnRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerTurnRequest(const PlayerTurnRequest& from);
  PlayerTurnRequest(PlayerTurnRequest&& from) noexcept
    : PlayerTurnRequest() {
    *this = ::std::move(from);
  }

  inline PlayerTurnRequest& operator=(const PlayerTurnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerTurnRequest& operator=(PlayerTurnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerTurnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerTurnRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerTurnRequest*>(
               &_PlayerTurnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PlayerTurnRequest& a, PlayerTurnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerTurnRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerTurnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerTurnRequest* New() const final {
    return new PlayerTurnRequest();
  }

  PlayerTurnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerTurnRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerTurnRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerTurnRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTurnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameInterface.PlayerTurnRequest";
  }
  protected:
  explicit PlayerTurnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerTurnRequest_PlayerTurn PlayerTurn;
  static constexpr PlayerTurn PLAYER1_TURN =
    PlayerTurnRequest_PlayerTurn_PLAYER1_TURN;
  static constexpr PlayerTurn PLAYER2_TURN =
    PlayerTurnRequest_PlayerTurn_PLAYER2_TURN;
  static inline bool PlayerTurn_IsValid(int value) {
    return PlayerTurnRequest_PlayerTurn_IsValid(value);
  }
  static constexpr PlayerTurn PlayerTurn_MIN =
    PlayerTurnRequest_PlayerTurn_PlayerTurn_MIN;
  static constexpr PlayerTurn PlayerTurn_MAX =
    PlayerTurnRequest_PlayerTurn_PlayerTurn_MAX;
  static constexpr int PlayerTurn_ARRAYSIZE =
    PlayerTurnRequest_PlayerTurn_PlayerTurn_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerTurn_descriptor() {
    return PlayerTurnRequest_PlayerTurn_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerTurn_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerTurn>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerTurn_Name.");
    return PlayerTurnRequest_PlayerTurn_Name(enum_t_value);
  }
  static inline bool PlayerTurn_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlayerTurn* value) {
    return PlayerTurnRequest_PlayerTurn_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTurnFieldNumber = 1,
  };
  // .GameInterface.PlayerTurnRequest.PlayerTurn turn = 1;
  void clear_turn();
  ::GameInterface::PlayerTurnRequest_PlayerTurn turn() const;
  void set_turn(::GameInterface::PlayerTurnRequest_PlayerTurn value);
  private:
  ::GameInterface::PlayerTurnRequest_PlayerTurn _internal_turn() const;
  void _internal_set_turn(::GameInterface::PlayerTurnRequest_PlayerTurn value);
  public:

  // @@protoc_insertion_point(class_scope:GameInterface.PlayerTurnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Name

// string name = 1;
inline void Name::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:GameInterface.Name.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameInterface.Name.name)
}
inline std::string* Name::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:GameInterface.Name.name)
  return _s;
}
inline const std::string& Name::_internal_name() const {
  return name_.Get();
}
inline void Name::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Name::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Name::release_name() {
  // @@protoc_insertion_point(field_release:GameInterface.Name.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Name::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:GameInterface.Name.name)
}

// -------------------------------------------------------------------

// PlayerID

// int32 id = 1;
inline void PlayerID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerID::id() const {
  // @@protoc_insertion_point(field_get:GameInterface.PlayerID.id)
  return _internal_id();
}
inline void PlayerID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PlayerID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GameInterface.PlayerID.id)
}

// -------------------------------------------------------------------

// Position

// int32 x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:GameInterface.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:GameInterface.Position.x)
}

// int32 y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:GameInterface.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:GameInterface.Position.y)
}

// -------------------------------------------------------------------

// GameStatus

// .GameInterface.GameStatus.Status status = 1;
inline void GameStatus::clear_status() {
  status_ = 0;
}
inline ::GameInterface::GameStatus_Status GameStatus::_internal_status() const {
  return static_cast< ::GameInterface::GameStatus_Status >(status_);
}
inline ::GameInterface::GameStatus_Status GameStatus::status() const {
  // @@protoc_insertion_point(field_get:GameInterface.GameStatus.status)
  return _internal_status();
}
inline void GameStatus::_internal_set_status(::GameInterface::GameStatus_Status value) {
  
  status_ = value;
}
inline void GameStatus::set_status(::GameInterface::GameStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GameInterface.GameStatus.status)
}

// -------------------------------------------------------------------

// PositionStatus

// .GameInterface.Position position = 1;
inline bool PositionStatus::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PositionStatus::has_position() const {
  return _internal_has_position();
}
inline void PositionStatus::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::GameInterface::Position& PositionStatus::_internal_position() const {
  const ::GameInterface::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameInterface::Position&>(
      ::GameInterface::_Position_default_instance_);
}
inline const ::GameInterface::Position& PositionStatus::position() const {
  // @@protoc_insertion_point(field_get:GameInterface.PositionStatus.position)
  return _internal_position();
}
inline void PositionStatus::unsafe_arena_set_allocated_position(
    ::GameInterface::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameInterface.PositionStatus.position)
}
inline ::GameInterface::Position* PositionStatus::release_position() {
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameInterface::Position* PositionStatus::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:GameInterface.PositionStatus.position)
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::GameInterface::Position* PositionStatus::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameInterface::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::GameInterface::Position* PositionStatus::mutable_position() {
  ::GameInterface::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:GameInterface.PositionStatus.position)
  return _msg;
}
inline void PositionStatus::set_allocated_position(::GameInterface::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameInterface::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:GameInterface.PositionStatus.position)
}

// .GameInterface.PositionStatus.Status status = 2;
inline void PositionStatus::clear_status() {
  status_ = 0;
}
inline ::GameInterface::PositionStatus_Status PositionStatus::_internal_status() const {
  return static_cast< ::GameInterface::PositionStatus_Status >(status_);
}
inline ::GameInterface::PositionStatus_Status PositionStatus::status() const {
  // @@protoc_insertion_point(field_get:GameInterface.PositionStatus.status)
  return _internal_status();
}
inline void PositionStatus::_internal_set_status(::GameInterface::PositionStatus_Status value) {
  
  status_ = value;
}
inline void PositionStatus::set_status(::GameInterface::PositionStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GameInterface.PositionStatus.status)
}

// -------------------------------------------------------------------

// PlayerPieces

// .GameInterface.Position position = 1;
inline bool PlayerPieces::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PlayerPieces::has_position() const {
  return _internal_has_position();
}
inline void PlayerPieces::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::GameInterface::Position& PlayerPieces::_internal_position() const {
  const ::GameInterface::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameInterface::Position&>(
      ::GameInterface::_Position_default_instance_);
}
inline const ::GameInterface::Position& PlayerPieces::position() const {
  // @@protoc_insertion_point(field_get:GameInterface.PlayerPieces.position)
  return _internal_position();
}
inline void PlayerPieces::unsafe_arena_set_allocated_position(
    ::GameInterface::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameInterface.PlayerPieces.position)
}
inline ::GameInterface::Position* PlayerPieces::release_position() {
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameInterface::Position* PlayerPieces::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:GameInterface.PlayerPieces.position)
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::GameInterface::Position* PlayerPieces::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameInterface::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::GameInterface::Position* PlayerPieces::mutable_position() {
  ::GameInterface::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:GameInterface.PlayerPieces.position)
  return _msg;
}
inline void PlayerPieces::set_allocated_position(::GameInterface::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameInterface::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:GameInterface.PlayerPieces.position)
}

// .GameInterface.PlayerPieces.PieceType pieceType = 2;
inline void PlayerPieces::clear_piecetype() {
  piecetype_ = 0;
}
inline ::GameInterface::PlayerPieces_PieceType PlayerPieces::_internal_piecetype() const {
  return static_cast< ::GameInterface::PlayerPieces_PieceType >(piecetype_);
}
inline ::GameInterface::PlayerPieces_PieceType PlayerPieces::piecetype() const {
  // @@protoc_insertion_point(field_get:GameInterface.PlayerPieces.pieceType)
  return _internal_piecetype();
}
inline void PlayerPieces::_internal_set_piecetype(::GameInterface::PlayerPieces_PieceType value) {
  
  piecetype_ = value;
}
inline void PlayerPieces::set_piecetype(::GameInterface::PlayerPieces_PieceType value) {
  _internal_set_piecetype(value);
  // @@protoc_insertion_point(field_set:GameInterface.PlayerPieces.pieceType)
}

// -------------------------------------------------------------------

// ClickRequest

// .GameInterface.Position position = 1;
inline bool ClickRequest::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ClickRequest::has_position() const {
  return _internal_has_position();
}
inline void ClickRequest::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::GameInterface::Position& ClickRequest::_internal_position() const {
  const ::GameInterface::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameInterface::Position&>(
      ::GameInterface::_Position_default_instance_);
}
inline const ::GameInterface::Position& ClickRequest::position() const {
  // @@protoc_insertion_point(field_get:GameInterface.ClickRequest.position)
  return _internal_position();
}
inline void ClickRequest::unsafe_arena_set_allocated_position(
    ::GameInterface::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameInterface.ClickRequest.position)
}
inline ::GameInterface::Position* ClickRequest::release_position() {
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameInterface::Position* ClickRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:GameInterface.ClickRequest.position)
  
  ::GameInterface::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::GameInterface::Position* ClickRequest::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameInterface::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::GameInterface::Position* ClickRequest::mutable_position() {
  ::GameInterface::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:GameInterface.ClickRequest.position)
  return _msg;
}
inline void ClickRequest::set_allocated_position(::GameInterface::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameInterface::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:GameInterface.ClickRequest.position)
}

// .GameInterface.PlayerID id = 2;
inline bool ClickRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ClickRequest::has_id() const {
  return _internal_has_id();
}
inline void ClickRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::GameInterface::PlayerID& ClickRequest::_internal_id() const {
  const ::GameInterface::PlayerID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameInterface::PlayerID&>(
      ::GameInterface::_PlayerID_default_instance_);
}
inline const ::GameInterface::PlayerID& ClickRequest::id() const {
  // @@protoc_insertion_point(field_get:GameInterface.ClickRequest.id)
  return _internal_id();
}
inline void ClickRequest::unsafe_arena_set_allocated_id(
    ::GameInterface::PlayerID* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameInterface.ClickRequest.id)
}
inline ::GameInterface::PlayerID* ClickRequest::release_id() {
  
  ::GameInterface::PlayerID* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameInterface::PlayerID* ClickRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:GameInterface.ClickRequest.id)
  
  ::GameInterface::PlayerID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::GameInterface::PlayerID* ClickRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameInterface::PlayerID>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::GameInterface::PlayerID* ClickRequest::mutable_id() {
  ::GameInterface::PlayerID* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:GameInterface.ClickRequest.id)
  return _msg;
}
inline void ClickRequest::set_allocated_id(::GameInterface::PlayerID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameInterface::PlayerID>::GetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:GameInterface.ClickRequest.id)
}

// -------------------------------------------------------------------

// PlayerTurnRequest

// .GameInterface.PlayerTurnRequest.PlayerTurn turn = 1;
inline void PlayerTurnRequest::clear_turn() {
  turn_ = 0;
}
inline ::GameInterface::PlayerTurnRequest_PlayerTurn PlayerTurnRequest::_internal_turn() const {
  return static_cast< ::GameInterface::PlayerTurnRequest_PlayerTurn >(turn_);
}
inline ::GameInterface::PlayerTurnRequest_PlayerTurn PlayerTurnRequest::turn() const {
  // @@protoc_insertion_point(field_get:GameInterface.PlayerTurnRequest.turn)
  return _internal_turn();
}
inline void PlayerTurnRequest::_internal_set_turn(::GameInterface::PlayerTurnRequest_PlayerTurn value) {
  
  turn_ = value;
}
inline void PlayerTurnRequest::set_turn(::GameInterface::PlayerTurnRequest_PlayerTurn value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:GameInterface.PlayerTurnRequest.turn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameInterface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameInterface::GameStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameInterface::GameStatus_Status>() {
  return ::GameInterface::GameStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::GameInterface::PositionStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameInterface::PositionStatus_Status>() {
  return ::GameInterface::PositionStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::GameInterface::PlayerPieces_PieceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameInterface::PlayerPieces_PieceType>() {
  return ::GameInterface::PlayerPieces_PieceType_descriptor();
}
template <> struct is_proto_enum< ::GameInterface::PlayerTurnRequest_PlayerTurn> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameInterface::PlayerTurnRequest_PlayerTurn>() {
  return ::GameInterface::PlayerTurnRequest_PlayerTurn_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
