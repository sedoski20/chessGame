// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: interface.proto

#include "interface.pb.h"
#include "interface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GameInterface {

static const char* ServerRequest_method_names[] = {
  "/GameInterface.ServerRequest/connect",
  "/GameInterface.ServerRequest/click",
  "/GameInterface.ServerRequest/getGameStatus",
  "/GameInterface.ServerRequest/getHighLightedPositions",
  "/GameInterface.ServerRequest/getPlayer1Pieces",
  "/GameInterface.ServerRequest/getPlayer2Pieces",
};

std::unique_ptr< ServerRequest::Stub> ServerRequest::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerRequest::Stub> stub(new ServerRequest::Stub(channel, options));
  return stub;
}

ServerRequest::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_connect_(ServerRequest_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_click_(ServerRequest_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGameStatus_(ServerRequest_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getHighLightedPositions_(ServerRequest_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getPlayer1Pieces_(ServerRequest_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getPlayer2Pieces_(ServerRequest_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ServerRequest::Stub::connect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::GameInterface::PlayerID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameInterface::Name, ::GameInterface::PlayerID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_connect_, context, request, response);
}

void ServerRequest::Stub::async::connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameInterface::Name, ::GameInterface::PlayerID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, std::move(f));
}

void ServerRequest::Stub::async::connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>* ServerRequest::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameInterface::PlayerID, ::GameInterface::Name, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>* ServerRequest::Stub::AsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerRequest::Stub::click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::GameInterface::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameInterface::ClickRequest, ::GameInterface::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_click_, context, request, response);
}

void ServerRequest::Stub::async::click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameInterface::ClickRequest, ::GameInterface::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_click_, context, request, response, std::move(f));
}

void ServerRequest::Stub::async::click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_click_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>* ServerRequest::Stub::PrepareAsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameInterface::Empty, ::GameInterface::ClickRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_click_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>* ServerRequest::Stub::AsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ServerRequest::Stub::getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::GameInterface::GameStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GameInterface::Empty, ::GameInterface::GameStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGameStatus_, context, request, response);
}

void ServerRequest::Stub::async::getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GameInterface::Empty, ::GameInterface::GameStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGameStatus_, context, request, response, std::move(f));
}

void ServerRequest::Stub::async::getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGameStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>* ServerRequest::Stub::PrepareAsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GameInterface::GameStatus, ::GameInterface::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGameStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>* ServerRequest::Stub::AsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGameStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::GameInterface::PositionStatus>* ServerRequest::Stub::getHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::GameInterface::PositionStatus>::Create(channel_.get(), rpcmethod_getHighLightedPositions_, context, request);
}

void ServerRequest::Stub::async::getHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PositionStatus>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GameInterface::PositionStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_getHighLightedPositions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>* ServerRequest::Stub::AsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PositionStatus>::Create(channel_.get(), cq, rpcmethod_getHighLightedPositions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>* ServerRequest::Stub::PrepareAsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PositionStatus>::Create(channel_.get(), cq, rpcmethod_getHighLightedPositions_, context, request, false, nullptr);
}

::grpc::ClientReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::getPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), rpcmethod_getPlayer1Pieces_, context, request);
}

void ServerRequest::Stub::async::getPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GameInterface::PlayerPieces>::Create(stub_->channel_.get(), stub_->rpcmethod_getPlayer1Pieces_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::AsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), cq, rpcmethod_getPlayer1Pieces_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::PrepareAsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), cq, rpcmethod_getPlayer1Pieces_, context, request, false, nullptr);
}

::grpc::ClientReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::getPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), rpcmethod_getPlayer2Pieces_, context, request);
}

void ServerRequest::Stub::async::getPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::GameInterface::PlayerPieces>::Create(stub_->channel_.get(), stub_->rpcmethod_getPlayer2Pieces_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::AsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), cq, rpcmethod_getPlayer2Pieces_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* ServerRequest::Stub::PrepareAsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::GameInterface::PlayerPieces>::Create(channel_.get(), cq, rpcmethod_getPlayer2Pieces_, context, request, false, nullptr);
}

ServerRequest::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerRequest::Service, ::GameInterface::Name, ::GameInterface::PlayerID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::Name* req,
             ::GameInterface::PlayerID* resp) {
               return service->connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerRequest::Service, ::GameInterface::ClickRequest, ::GameInterface::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::ClickRequest* req,
             ::GameInterface::Empty* resp) {
               return service->click(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerRequest::Service, ::GameInterface::Empty, ::GameInterface::GameStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::Empty* req,
             ::GameInterface::GameStatus* resp) {
               return service->getGameStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServerRequest::Service, ::GameInterface::Empty, ::GameInterface::PositionStatus>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::Empty* req,
             ::grpc::ServerWriter<::GameInterface::PositionStatus>* writer) {
               return service->getHighLightedPositions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServerRequest::Service, ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::Empty* req,
             ::grpc::ServerWriter<::GameInterface::PlayerPieces>* writer) {
               return service->getPlayer1Pieces(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerRequest_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServerRequest::Service, ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
          [](ServerRequest::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GameInterface::Empty* req,
             ::grpc::ServerWriter<::GameInterface::PlayerPieces>* writer) {
               return service->getPlayer2Pieces(ctx, req, writer);
             }, this)));
}

ServerRequest::Service::~Service() {
}

::grpc::Status ServerRequest::Service::connect(::grpc::ServerContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerRequest::Service::click(::grpc::ServerContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerRequest::Service::getGameStatus(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerRequest::Service::getHighLightedPositions(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerRequest::Service::getPlayer1Pieces(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerRequest::Service::getPlayer2Pieces(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GameInterface

