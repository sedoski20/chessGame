// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: interface.proto
#ifndef GRPC_interface_2eproto__INCLUDED
#define GRPC_interface_2eproto__INCLUDED

#include "interface.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace GameInterface {

class ServerRequest final {
 public:
  static constexpr char const* service_full_name() {
    return "GameInterface.ServerRequest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status connect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::GameInterface::PlayerID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>> Asyncconnect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>>(AsyncconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>>(PrepareAsyncconnectRaw(context, request, cq));
    }
    virtual ::grpc::Status click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::GameInterface::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>> Asyncclick(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>>(AsyncclickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>> PrepareAsyncclick(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>>(PrepareAsyncclickRaw(context, request, cq));
    }
    virtual ::grpc::Status getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::GameInterface::GameStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>> AsyncgetGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>>(AsyncgetGameStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>> PrepareAsyncgetGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>>(PrepareAsyncgetGameStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PositionStatus>> getHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PositionStatus>>(getHighLightedPositionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>> AsyncgetHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>>(AsyncgetHighLightedPositionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>> PrepareAsyncgetHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>>(PrepareAsyncgetHighLightedPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>> getPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>>(getPlayer1PiecesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>> AsyncgetPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>>(AsyncgetPlayer1PiecesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>> PrepareAsyncgetPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>>(PrepareAsyncgetPlayer1PiecesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>> getPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>>(getPlayer2PiecesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>> AsyncgetPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>>(AsyncgetPlayer2PiecesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>> PrepareAsyncgetPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>>(PrepareAsyncgetPlayer2PiecesRaw(context, request, cq));
    }
    virtual ::grpc::Status getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::GameInterface::PlayerTurnRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>> AsyncgetPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>>(AsyncgetPlayerTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>> PrepareAsyncgetPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>>(PrepareAsyncgetPlayerTurnRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PositionStatus>* reactor) = 0;
      virtual void getPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) = 0;
      virtual void getPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) = 0;
      virtual void getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>* AsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerID>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>* AsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::Empty>* PrepareAsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>* AsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::GameStatus>* PrepareAsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GameInterface::PositionStatus>* getHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>* AsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PositionStatus>* PrepareAsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>* getPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>* AsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>* PrepareAsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::GameInterface::PlayerPieces>* getPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>* AsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::GameInterface::PlayerPieces>* PrepareAsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>* AsyncgetPlayerTurnRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameInterface::PlayerTurnRequest>* PrepareAsyncgetPlayerTurnRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status connect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::GameInterface::PlayerID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>> Asyncconnect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>>(AsyncconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>>(PrepareAsyncconnectRaw(context, request, cq));
    }
    ::grpc::Status click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::GameInterface::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>> Asyncclick(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>>(AsyncclickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>> PrepareAsyncclick(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>>(PrepareAsyncclickRaw(context, request, cq));
    }
    ::grpc::Status getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::GameInterface::GameStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>> AsyncgetGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>>(AsyncgetGameStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>> PrepareAsyncgetGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>>(PrepareAsyncgetGameStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PositionStatus>> getHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PositionStatus>>(getHighLightedPositionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>> AsyncgetHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>>(AsyncgetHighLightedPositionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>> PrepareAsyncgetHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>>(PrepareAsyncgetHighLightedPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PlayerPieces>> getPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PlayerPieces>>(getPlayer1PiecesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>> AsyncgetPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>>(AsyncgetPlayer1PiecesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>> PrepareAsyncgetPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>>(PrepareAsyncgetPlayer1PiecesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PlayerPieces>> getPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::GameInterface::PlayerPieces>>(getPlayer2PiecesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>> AsyncgetPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>>(AsyncgetPlayer2PiecesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>> PrepareAsyncgetPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>>(PrepareAsyncgetPlayer2PiecesRaw(context, request, cq));
    }
    ::grpc::Status getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::GameInterface::PlayerTurnRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>> AsyncgetPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>>(AsyncgetPlayerTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>> PrepareAsyncgetPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>>(PrepareAsyncgetPlayerTurnRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, std::function<void(::grpc::Status)>) override;
      void connect(::grpc::ClientContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, std::function<void(::grpc::Status)>) override;
      void click(::grpc::ClientContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, std::function<void(::grpc::Status)>) override;
      void getGameStatus(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getHighLightedPositions(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PositionStatus>* reactor) override;
      void getPlayer1Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) override;
      void getPlayer2Pieces(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::grpc::ClientReadReactor< ::GameInterface::PlayerPieces>* reactor) override;
      void getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response, std::function<void(::grpc::Status)>) override;
      void getPlayerTurn(::grpc::ClientContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>* AsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerID>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::GameInterface::Name& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>* AsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::Empty>* PrepareAsyncclickRaw(::grpc::ClientContext* context, const ::GameInterface::ClickRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>* AsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::GameStatus>* PrepareAsyncgetGameStatusRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GameInterface::PositionStatus>* getHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>* AsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PositionStatus>* PrepareAsyncgetHighLightedPositionsRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GameInterface::PlayerPieces>* getPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* AsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* PrepareAsyncgetPlayer1PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::GameInterface::PlayerPieces>* getPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* AsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::GameInterface::PlayerPieces>* PrepareAsyncgetPlayer2PiecesRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>* AsyncgetPlayerTurnRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameInterface::PlayerTurnRequest>* PrepareAsyncgetPlayerTurnRaw(::grpc::ClientContext* context, const ::GameInterface::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_connect_;
    const ::grpc::internal::RpcMethod rpcmethod_click_;
    const ::grpc::internal::RpcMethod rpcmethod_getGameStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getHighLightedPositions_;
    const ::grpc::internal::RpcMethod rpcmethod_getPlayer1Pieces_;
    const ::grpc::internal::RpcMethod rpcmethod_getPlayer2Pieces_;
    const ::grpc::internal::RpcMethod rpcmethod_getPlayerTurn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status connect(::grpc::ServerContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response);
    virtual ::grpc::Status click(::grpc::ServerContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response);
    virtual ::grpc::Status getGameStatus(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response);
    virtual ::grpc::Status getHighLightedPositions(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* writer);
    virtual ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* writer);
    virtual ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* writer);
    virtual ::grpc::Status getPlayerTurn(::grpc::ServerContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::GameInterface::Name* request, ::grpc::ServerAsyncResponseWriter< ::GameInterface::PlayerID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_click() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclick(::grpc::ServerContext* context, ::GameInterface::ClickRequest* request, ::grpc::ServerAsyncResponseWriter< ::GameInterface::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGameStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGameStatus(::grpc::ServerContext* context, ::GameInterface::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GameInterface::GameStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHighLightedPositions(::grpc::ServerContext* context, ::GameInterface::Empty* request, ::grpc::ServerAsyncWriter< ::GameInterface::PositionStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayer1Pieces(::grpc::ServerContext* context, ::GameInterface::Empty* request, ::grpc::ServerAsyncWriter< ::GameInterface::PlayerPieces>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayer2Pieces(::grpc::ServerContext* context, ::GameInterface::Empty* request, ::grpc::ServerAsyncWriter< ::GameInterface::PlayerPieces>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayerTurn(::grpc::ServerContext* context, ::GameInterface::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GameInterface::PlayerTurnRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_connect<WithAsyncMethod_click<WithAsyncMethod_getGameStatus<WithAsyncMethod_getHighLightedPositions<WithAsyncMethod_getPlayer1Pieces<WithAsyncMethod_getPlayer2Pieces<WithAsyncMethod_getPlayerTurn<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_connect() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GameInterface::Name, ::GameInterface::PlayerID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Name* request, ::GameInterface::PlayerID* response) { return this->connect(context, request, response); }));}
    void SetMessageAllocatorFor_connect(
        ::grpc::MessageAllocator< ::GameInterface::Name, ::GameInterface::PlayerID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameInterface::Name, ::GameInterface::PlayerID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_click() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GameInterface::ClickRequest, ::GameInterface::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::ClickRequest* request, ::GameInterface::Empty* response) { return this->click(context, request, response); }));}
    void SetMessageAllocatorFor_click(
        ::grpc::MessageAllocator< ::GameInterface::ClickRequest, ::GameInterface::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameInterface::ClickRequest, ::GameInterface::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* click(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGameStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::GameInterface::Empty, ::GameInterface::GameStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Empty* request, ::GameInterface::GameStatus* response) { return this->getGameStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getGameStatus(
        ::grpc::MessageAllocator< ::GameInterface::Empty, ::GameInterface::GameStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameInterface::Empty, ::GameInterface::GameStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGameStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GameInterface::Empty, ::GameInterface::PositionStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Empty* request) { return this->getHighLightedPositions(context, request); }));
    }
    ~WithCallbackMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::GameInterface::PositionStatus>* getHighLightedPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Empty* request) { return this->getPlayer1Pieces(context, request); }));
    }
    ~WithCallbackMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::GameInterface::PlayerPieces>* getPlayer1Pieces(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Empty* request) { return this->getPlayer2Pieces(context, request); }));
    }
    ~WithCallbackMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::GameInterface::PlayerPieces>* getPlayer2Pieces(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::GameInterface::Empty, ::GameInterface::PlayerTurnRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameInterface::Empty* request, ::GameInterface::PlayerTurnRequest* response) { return this->getPlayerTurn(context, request, response); }));}
    void SetMessageAllocatorFor_getPlayerTurn(
        ::grpc::MessageAllocator< ::GameInterface::Empty, ::GameInterface::PlayerTurnRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameInterface::Empty, ::GameInterface::PlayerTurnRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPlayerTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_connect<WithCallbackMethod_click<WithCallbackMethod_getGameStatus<WithCallbackMethod_getHighLightedPositions<WithCallbackMethod_getPlayer1Pieces<WithCallbackMethod_getPlayer2Pieces<WithCallbackMethod_getPlayerTurn<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_click() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGameStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_connect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_click() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclick(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGameStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGameStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHighLightedPositions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayer1Pieces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayer2Pieces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPlayerTurn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_connect() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->connect(context, request, response); }));
    }
    ~WithRawCallbackMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_click() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->click(context, request, response); }));
    }
    ~WithRawCallbackMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* click(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGameStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGameStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGameStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getHighLightedPositions(context, request); }));
    }
    ~WithRawCallbackMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getHighLightedPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getPlayer1Pieces(context, request); }));
    }
    ~WithRawCallbackMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getPlayer1Pieces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getPlayer2Pieces(context, request); }));
    }
    ~WithRawCallbackMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getPlayer2Pieces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPlayerTurn(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPlayerTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_connect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameInterface::Name, ::GameInterface::PlayerID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameInterface::Name, ::GameInterface::PlayerID>* streamer) {
                       return this->Streamedconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connect(::grpc::ServerContext* /*context*/, const ::GameInterface::Name* /*request*/, ::GameInterface::PlayerID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameInterface::Name,::GameInterface::PlayerID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_click : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_click() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameInterface::ClickRequest, ::GameInterface::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameInterface::ClickRequest, ::GameInterface::Empty>* streamer) {
                       return this->Streamedclick(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_click() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status click(::grpc::ServerContext* /*context*/, const ::GameInterface::ClickRequest* /*request*/, ::GameInterface::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclick(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameInterface::ClickRequest,::GameInterface::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGameStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGameStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameInterface::Empty, ::GameInterface::GameStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameInterface::Empty, ::GameInterface::GameStatus>* streamer) {
                       return this->StreamedgetGameStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGameStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGameStatus(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::GameStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGameStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameInterface::Empty,::GameInterface::GameStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPlayerTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPlayerTurn() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameInterface::Empty, ::GameInterface::PlayerTurnRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameInterface::Empty, ::GameInterface::PlayerTurnRequest>* streamer) {
                       return this->StreamedgetPlayerTurn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPlayerTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPlayerTurn(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::GameInterface::PlayerTurnRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPlayerTurn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameInterface::Empty,::GameInterface::PlayerTurnRequest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_connect<WithStreamedUnaryMethod_click<WithStreamedUnaryMethod_getGameStatus<WithStreamedUnaryMethod_getPlayerTurn<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getHighLightedPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getHighLightedPositions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GameInterface::Empty, ::GameInterface::PositionStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GameInterface::Empty, ::GameInterface::PositionStatus>* streamer) {
                       return this->StreamedgetHighLightedPositions(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getHighLightedPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHighLightedPositions(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PositionStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetHighLightedPositions(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GameInterface::Empty,::GameInterface::PositionStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getPlayer1Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getPlayer1Pieces() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GameInterface::Empty, ::GameInterface::PlayerPieces>* streamer) {
                       return this->StreamedgetPlayer1Pieces(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getPlayer1Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPlayer1Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetPlayer1Pieces(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GameInterface::Empty,::GameInterface::PlayerPieces>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getPlayer2Pieces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getPlayer2Pieces() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GameInterface::Empty, ::GameInterface::PlayerPieces>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GameInterface::Empty, ::GameInterface::PlayerPieces>* streamer) {
                       return this->StreamedgetPlayer2Pieces(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getPlayer2Pieces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPlayer2Pieces(::grpc::ServerContext* /*context*/, const ::GameInterface::Empty* /*request*/, ::grpc::ServerWriter< ::GameInterface::PlayerPieces>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetPlayer2Pieces(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GameInterface::Empty,::GameInterface::PlayerPieces>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getHighLightedPositions<WithSplitStreamingMethod_getPlayer1Pieces<WithSplitStreamingMethod_getPlayer2Pieces<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_connect<WithStreamedUnaryMethod_click<WithStreamedUnaryMethod_getGameStatus<WithSplitStreamingMethod_getHighLightedPositions<WithSplitStreamingMethod_getPlayer1Pieces<WithSplitStreamingMethod_getPlayer2Pieces<WithStreamedUnaryMethod_getPlayerTurn<Service > > > > > > > StreamedService;
};

}  // namespace GameInterface


#endif  // GRPC_interface_2eproto__INCLUDED
